AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Auth0IdentityProviderArn:
    Type: String
    Description: ARN of the Auth0 IdentityProvider

Resources:
  # S3 BUCKET
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicReadWrite

  # S3 BUCKET POLICY
  BucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: 2012-10-17
          Statement:
            - Sid: PublicReadWriteForBucketObjects
              Effect: Allow
              Principal: '*'
              Action: "s3:*"
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
        Bucket: !Ref S3Bucket

  # DYNAMO DB
  DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        KeySchema:
        - AttributeName: "userid"
          KeyType: "HASH"
        - AttributeName: "title"
          KeyType: "RANGE"
        AttributeDefinitions:
        - AttributeName: "userid"
          AttributeType: "S"
        - AttributeName: "title"
          AttributeType: "S"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: todos

  # API GATEWAY
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: swagger.yaml
      Variables:
        LambdaCreateFunction: !Ref CreateFunction

  # FUNCTIONS
  CreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: todos/create.create
      Runtime: nodejs6.10
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
          TABLE_NAME: !Ref DynamoDBTable
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /create
            Method: POST

# Create a federated identity pool and associated roles
  # and attach the auth0 identity provider.
  Auth0IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: Auth0IdentityPool
      AllowUnauthenticatedIdentities: false
      OpenIdConnectProviderARNs:
        - !Ref Auth0IdentityProviderArn

  Auth0IdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref Auth0IdentityPool
      Roles:
        authenticated: !GetAtt Auth0IdentityPoolRoleAuthenticated.Arn

  Auth0IdentityPoolRoleAuthenticated:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              cognito-identity.amazonaws.com:aud: !Ref Auth0IdentityPool
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: authenticated
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/AmazonCognitoReadOnly



